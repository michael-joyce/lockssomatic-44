<?php

declare(strict_types=1);

/*
 * (c) 2021 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Nines\UtilBundle\Entity\AbstractEntity;

/**
 * LOCKSS Archival Unit.
 *
 * @ORM\Table(name="au")
 * @ORM\Entity(repositoryClass="App\Repository\AuRepository")
 */
class Au extends AbstractEntity {
    /**
     * True if this AU is managed by LOCKSSOMatic. Defaults to false.
     *
     * @var bool
     *
     * @ORM\Column(name="open", type="boolean", nullable=false)
     */
    private $open;

    /**
     * LOCKSSOMatic AUID based on the au properties.
     *
     * @var mixed
     *
     * @ORM\Column(name="auid", type="string", length=512, nullable=false)
     */
    private $auid;

    /**
     * LOCKSSOMatic comment for this au. Its specific to LOCKSSOMatic.
     *
     * @var string
     *
     * @ORM\Column(name="comment", type="string", length=512, nullable=true)
     */
    private $comment;

    /**
     * The PLN for this AU.
     *
     * @var Pln
     *
     * @ORM\ManyToOne(targetEntity="Pln", inversedBy="aus")
     * @ORM\JoinColumn(nullable=false)
     */
    private $pln;

    /**
     * The content provider for this AU.
     *
     * In LOM, all content in an AU must come from the same provider.
     *
     * @var ContentProvider
     *
     * @ORM\ManyToOne(targetEntity="ContentProvider", inversedBy="aus")
     * @ORM\JoinColumn(nullable=false)
     */
    private $contentProvider;

    /**
     * LOCKSS AUs are generated by LOCKSS plugins.
     *
     * This is the plugin that generated this AU.
     *
     * @var Plugin
     *
     * @ORM\ManyToOne(targetEntity="Plugin", inversedBy="aus")
     * @ORM\JoinColumn(nullable=false)
     */
    private $plugin;

    /**
     * Hierarchial collection of properties for the AU.
     *
     * @var AuProperty[]|Collection
     *
     * @ORM\OneToMany(targetEntity="AuProperty", mappedBy="au")
     */
    private $auProperties;

    /**
     * Timestamped list of AU status records.
     *
     * @var AuStatus[]|Collection
     *
     * @ORM\OneToMany(targetEntity="AuStatus", mappedBy="au")
     */
    private $auStatus;

    /**
     * List of all content deposited to the AU.
     *
     * This is a LOCKSSOMatic-specific field.
     *
     * @var Collection|Deposits[]
     *
     * @ORM\OneToMany(targetEntity="Deposit", mappedBy="au")
     */
    private $deposits;

    /**
     * Build the AU.
     */
    public function __construct() {
        parent::__construct();
        $this->open = true;
        $this->auProperties = new ArrayCollection();
        $this->auStatus = new ArrayCollection();
        $this->deposits = new ArrayCollection();
    }

    /**
     * Build a string representation of the AU.
     */
    public function __toString() : string {
        if ($this->id) {
            return 'AU #' . $this->id;
        }

        return 'new AU';
    }

    /**
     * Set open.
     *
     * @param bool $open
     *
     * @return Au
     */
    public function setOpen($open) {
        if ($this->open) {
            $this->open = $open;
        }

        return $this;
    }

    /**
     * Get open.
     *
     * @return bool
     */
    public function isOpen() {
        return $this->open;
    }

    /**
     * Set comment.
     *
     * @param string $comment
     *
     * @return Au
     */
    public function setComment($comment) {
        $this->comment = $comment;

        return $this;
    }

    /**
     * Get comment.
     *
     * @return string
     */
    public function getComment() {
        return $this->comment;
    }

    /**
     * Set pln.
     *
     * @param Pln $pln
     *
     * @return Au
     */
    public function setPln(?Pln $pln = null) {
        $this->pln = $pln;

        return $this;
    }

    /**
     * Get pln.
     *
     * @return Pln
     */
    public function getPln() {
        return $this->pln;
    }

    /**
     * Set contentProvider.
     *
     * @param ContentProvider $contentProvider
     *
     * @return Au
     */
    public function setContentProvider(?ContentProvider $contentProvider = null) {
        $this->contentProvider = $contentProvider;

        return $this;
    }

    /**
     * Get contentProvider.
     *
     * @return ContentProvider
     */
    public function getContentProvider() {
        return $this->contentProvider;
    }

    /**
     * Set plugin.
     *
     * @param Plugin $plugin
     *
     * @return Au
     */
    public function setPlugin(?Plugin $plugin = null) {
        $this->plugin = $plugin;

        return $this;
    }

    /**
     * Get plugin.
     *
     * @return Plugin
     */
    public function getPlugin() {
        return $this->plugin;
    }

    /**
     * Add auProperty.
     *
     * @return Au
     */
    public function addAuProperty(AuProperty $auProperty) {
        $this->auProperties[] = $auProperty;

        return $this;
    }

    /**
     * Remove auProperty.
     */
    public function removeAuProperty(AuProperty $auProperty) : void {
        $this->auProperties->removeElement($auProperty);
    }

    /**
     * Get auProperties.
     *
     * @return Collection
     */
    public function getAuProperties() {
        return $this->auProperties;
    }

    /**
     * Check if the AU has any properties.
     *
     * @return bool
     */
    public function hasAuProperties() {
        return ! $this->auProperties->isEmpty();
    }

    /**
     * Get the top level AU properties.
     *
     * @return AuProperty[]|Collection
     */
    public function getRootAuProperties() {
        return $this->auProperties->filter(fn (AuProperty $p) => null === $p->getParent());
    }

    /**
     * Get the value of a property.
     *
     * @param string $name
     *
     * @return null|string
     */
    public function getSimpleAuProperty($name) {
        foreach ($this->auProperties as $property) {
            if ($property->getPropertyKey() === $name) {
                return $property->getPropertyValue();
            }
        }
    }

    /**
     * Get an AU Property based on the property key.
     *
     * @param mixed $name
     *
     * @return null|AuProperty
     */
    public function getAuProperty($name) {
        foreach ($this->auProperties as $property) {
            if ('key' === $property->getPropertyKey() && $property->getPropertyValue() === $name) {
                return $property->getParent();
            }
        }
    }

    /**
     * Get an AU property value based on the key.
     *
     * @param string $key
     *
     * @return string
     */
    public function getAuPropertyValue($key) {
        $value = '';
        $property = $this->getAuProperty($key);
        if (null === $property) {
            return $value;
        }

        foreach ($property->getChildren() as $child) {
            if ('value' === $child->getPropertyKey()) {
                $value = $child->getPropertyValue();

                break;
            }
        }

        return $value;
    }

    /**
     * Add auStatus.
     *
     * @return Au
     */
    public function addAuStatus(AuStatus $auStatus) {
        $this->auStatus[] = $auStatus;

        return $this;
    }

    /**
     * Remove auStatus.
     */
    public function removeAuStatus(AuStatus $auStatus) : void {
        $this->auStatus->removeElement($auStatus);
    }

    /**
     * Get auStatus.
     *
     * @return Collection
     */
    public function getAuStatus() {
        return $this->auStatus;
    }

    /**
     * Add deposit.
     *
     * @return Au
     */
    public function addDeposit(Deposit $deposit) {
        $this->deposits[] = $deposit;

        return $this;
    }

    /**
     * Remove deposit.
     */
    public function removeDeposit(Deposit $deposit) : void {
        $this->deposits->removeElement($deposit);
    }

    /**
     * Get deposits.
     *
     * @return Collection
     */
    public function getDeposits() {
        return $this->deposits;
    }

    /**
     * Set auid.
     *
     * @param string $auid
     *
     * @return Au
     */
    public function setAuid($auid) {
        $this->auid = $auid;

        return $this;
    }

    /**
     * Get auid.
     *
     * @return string
     */
    public function getAuid() {
        return $this->auid;
    }
}
